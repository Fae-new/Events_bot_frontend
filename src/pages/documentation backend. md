# Attend Agent API Documentation

Base URL: `http://127.0.0.1:8000/api`
WebSocket URL: `ws://localhost:8080`

## Table of Contents

1. [Conversation API](#conversation-api)
2. [Vendor Management API](#vendor-management-api)
3. [Bot Configuration API](#bot-configuration-api)
4. [WebSocket API](#websocket-api)
5. [Health Check](#health-check)
6. [Error Responses](#error-responses)

---

## Conversation API

### 1. Create Conversation

**POST** `/conversations`

Creates a new conversation for event planning chat.

**Request Body:**

```json
{
    "external_user_id": "user_12345",
    "metadata": {
        "source": "web_app",
        "user_agent": "Mozilla/5.0...",
        "timestamp": "2025-07-26T10:30:00Z"
    }
}
```

**Response (201):**

```json
{
    "success": true,
    "conversationId": "conv_abc123",
    "external_user_id": "user_12345",
    "message_count": 0,
    "created_at": "2025-07-26T10:30:00Z"
}
```

### 2. List Conversations

**GET** `/conversations`

Retrieves all conversations with pagination.

**Query Parameters:**

-   `page` (optional): Page number (default: 1)
-   `per_page` (optional): Items per page (default: 15, max: 50)
-   `external_user_id` (optional): Filter by user ID

**Response (200):**

```json
{
    "success": true,
    "data": [
        {
            "conversationId": "conv_abc123",
            "external_user_id": "user_12345",
            "message_count": 5,
            "created_at": "2025-07-26T10:30:00Z",
            "updated_at": "2025-07-26T10:35:00Z"
        }
    ],
    "pagination": {
        "current_page": 1,
        "last_page": 1,
        "per_page": 15,
        "total": 1
    }
}
```

### 3. Get Conversation Details

**GET** `/conversations/{conversationId}`

Retrieves specific conversation with all messages.

**Response (200):**

```json
{
    "success": true,
    "data": {
        "conversationId": "conv_abc123",
        "external_user_id": "user_12345",
        "message_count": 3,
        "messages": [
            {
                "id": 1,
                "role": "user",
                "content": "I need help planning a wedding",
                "timestamp": "2025-07-26T10:31:00Z"
            },
            {
                "id": 2,
                "role": "assistant",
                "content": "I'd be happy to help you plan your wedding! Let's start with some basic details...",
                "timestamp": "2025-07-26T10:31:15Z"
            }
        ],
        "created_at": "2025-07-26T10:30:00Z"
    }
}
```

### 4. Send Chat Message (HTTP)

**POST** `/conversations/{conversationId}/chat`

Sends a message and receives AI response via HTTP.

**Request Body:**

```json
{
    "message": "I'm planning a wedding for 150 guests in New York"
}
```

**Response (200):**

```json
{
    "success": true,
    "response": "Wonderful! A 150-guest wedding in New York is exciting...",
    "conversationId": "conv_abc123",
    "message_count": 4
}
```

### 5. Generate Event Brief

**POST** `/conversations/{conversationId}/event-brief`

Generates a structured event brief from conversation context.

**Response (200):**

```json
{
    "success": true,
    "event_brief": {
        "event_type": "wedding",
        "guest_count": 150,
        "location": "New York",
        "budget_range": "$50,000 - $75,000",
        "date": "2025-09-15",
        "requirements": ["outdoor ceremony", "indoor reception", "live music"]
    }
}
```

### 6. Get Vendor Recommendations

**POST** `/conversations/{conversationId}/vendor-recommendations`

Gets AI-powered vendor recommendations based on conversation.

**Request Body (optional):**

```json
{
    "category": "catering",
    "location": "New York"
}
```

**Response (200):**

```json
{
    "success": true,
    "recommendations": "Based on your wedding requirements, I recommend these caterers...",
    "available_vendors": [
        {
            "id": 1,
            "name": "Elite Catering Co.",
            "category": "catering",
            "rating": 4.8,
            "location": { "city": "New York", "state": "NY" },
            "pricing": { "base_rate": 75, "period": "per person" }
        }
    ]
}
```

---

## Vendor Management API

### 1. List Vendors

**GET** `/vendors`

Retrieves vendors with filtering and pagination.

**Query Parameters:**

-   `category` (optional): Filter by category (catering, venue, photography, etc.)
-   `city` (optional): Filter by city
-   `state` (optional): Filter by state
-   `min_rating` (optional): Minimum rating (0-5)
-   `search` (optional): Search in name/specialties
-   `sort_by` (optional): Sort field (rating, name, created_at)
-   `sort_order` (optional): asc/desc (default: desc)
-   `per_page` (optional): Items per page (default: 15, max: 50)

**Example:** `GET /vendors?category=catering&city=New York&min_rating=4.0&sort_by=rating`

**Response (200):**

```json
{
    "success": true,
    "data": [
        {
            "id": 1,
            "name": "Elite Catering Co.",
            "category": "catering",
            "description": "Premium catering services for weddings and corporate events",
            "services": ["full-service catering", "corporate events"],
            "specialties": ["wedding", "corporate"],
            "location": {
                "address": "123 Main St",
                "city": "New York",
                "state": "NY",
                "zip_code": "10001",
                "service_radius": 50
            },
            "contact": {
                "phone": "+1-555-0123",
                "email": "info@elitecatering.com",
                "website": "https://elitecatering.com"
            },
            "pricing": {
                "base_rate": 75,
                "period": "per person",
                "minimum_order": "$2,000",
                "packages": [
                    {
                        "name": "Wedding Package",
                        "price": 85,
                        "description": "Complete wedding catering with service"
                    }
                ]
            },
            "availability": {
                "lead_time": 14,
                "seasonal_restrictions": ["December 20-31"]
            },
            "credentials": {
                "licensed": true,
                "insured": true,
                "years_in_business": 5
            },
            "rating": 4.8,
            "reviews": 127,
            "created_at": "2025-07-26T09:00:00Z"
        }
    ],
    "pagination": {
        "current_page": 1,
        "last_page": 3,
        "per_page": 15,
        "total": 42
    }
}
```

### 2. Create Vendor

**POST** `/vendors`

Creates a new vendor.

**Request Body:**

```json
{
    "name": "Elite Catering Co.",
    "category": "catering",
    "description": "Premium catering services for all occasions",
    "services": [
        "full-service catering",
        "corporate events",
        "wedding catering"
    ],
    "specialties": ["wedding", "corporate", "gala"],
    "location": {
        "address": "123 Main St",
        "city": "New York",
        "state": "NY",
        "zipCode": "10001",
        "serviceRadius": 50
    },
    "contact": {
        "phone": "+1-555-0123",
        "email": "info@elitecatering.com",
        "website": "https://elitecatering.com"
    },
    "pricing": {
        "baseRate": 75,
        "period": "per person",
        "minimumOrder": "$2,000",
        "packages": [
            {
                "name": "Wedding Package",
                "price": 85,
                "description": "Complete wedding catering with service"
            }
        ]
    },
    "availability": {
        "leadTime": 14,
        "seasonalRestrictions": ["December 20-31"]
    },
    "credentials": {
        "licensed": true,
        "insured": true,
        "yearsInBusiness": 5
    },
    "rating": 4.8,
    "reviews": 127
}
```

**Valid Categories:**

-   `catering`
-   `venue`
-   `photography`
-   `entertainment`
-   `decoration`
-   `transportation`
-   `planning`
-   `other`

**Response (201):**

```json
{
    "success": true,
    "message": "Vendor created successfully",
    "data": {
        "id": 1,
        "name": "Elite Catering Co."
        // ... full vendor object
    }
}
```

### 3. Get Vendor Details

**GET** `/vendors/{id}`

Retrieves specific vendor details.

**Response (200):**

```json
{
    "success": true,
    "data": {
        "id": 1,
        "name": "Elite Catering Co."
        // ... full vendor object
    }
}
```

### 4. Update Vendor

**PUT** `/vendors/{id}`

Updates vendor information. All fields are optional (partial updates supported).

**Request Body (example partial update):**

```json
{
    "rating": 4.9,
    "reviews": 135,
    "pricing": {
        "baseRate": 80,
        "period": "per person"
    }
}
```

**Response (200):**

```json
{
    "success": true,
    "message": "Vendor updated successfully",
    "data": {
        // ... updated vendor object
    }
}
```

### 5. Delete Vendor

**DELETE** `/vendors/{id}`

Deletes a vendor.

**Response (200):**

```json
{
    "success": true,
    "message": "Vendor deleted successfully"
}
```

### 6. Get Vendor Categories

**GET** `/vendors-categories`

Returns vendor categories with counts.

**Response (200):**

```json
{
    "success": true,
    "data": [
        {
            "category": "catering",
            "count": 15
        },
        {
            "category": "venue",
            "count": 12
        },
        {
            "category": "photography",
            "count": 8
        }
    ]
}
```

### 7. Get Vendor Statistics

**GET** `/vendors-stats`

Returns vendor statistics and analytics.

**Response (200):**

```json
{
    "success": true,
    "data": {
        "total_vendors": 42,
        "average_rating": 4.3,
        "top_rated": 18,
        "by_category": [
            {
                "category": "catering",
                "count": 15,
                "avg_rating": 4.5
            }
        ],
        "recent_additions": 5
    }
}
```

---

## Bot Configuration API

### 1. Get Bot Configuration

**GET** `/bot-config`

Retrieves current bot configuration and prompts.

**Response (200):**

```json
{
    "success": true,
    "data": {
        "system_prompt": "You are an expert event planning assistant...",
        "context_data": [
            "Event Planning Best Practices",
            "Vendor Management Guidelines",
            "Budget Planning Tips"
        ],
        "personality_traits": ["helpful", "professional", "detail-oriented"]
    }
}
```

### 2. Update Bot Configuration

**PUT** `/bot-config`

Updates bot configuration and prompts.

**Request Body:**

```json
{
    "system_prompt": "You are an expert event planning assistant specialized in luxury events...",
    "context_data": ["Luxury Event Planning", "High-End Vendor Management"],
    "personality_traits": ["sophisticated", "attentive", "exclusive"]
}
```

**Response (200):**

```json
{
    "success": true,
    "message": "Bot configuration updated successfully",
    "data": {
        // ... updated configuration
    }
}
```

### 3. Reset Bot Configuration

**POST** `/bot-config/reset`

Resets bot configuration to defaults.

**Response (200):**

```json
{
    "success": true,
    "message": "Bot configuration reset to defaults",
    "data": {
        // ... default configuration
    }
}
```

---

## WebSocket API

### Connection

```javascript
const ws = new WebSocket("ws://localhost:8080");
```

### Events You Can Send

#### 1. Send Message

```javascript
ws.send(
    JSON.stringify({
        event: "message",
        payload: {
            conversationId: "conv_abc123",
            content: "I need help planning my wedding",
            role: "user",
        },
    }),
);
```

#### 2. Join Conversation

```javascript
ws.send(
    JSON.stringify({
        event: "join_conversation",
        payload: {
            conversationId: "conv_abc123",
        },
    }),
);
```

#### 3. Typing Indicator

```javascript
ws.send(
    JSON.stringify({
        event: "typing",
        payload: {
            conversationId: "conv_abc123",
            typing: true,
        },
    }),
);
```

### Events You Will Receive

#### 1. Connection Confirmed

```javascript
{
  "event": "connected",
  "data": {
    "connectionId": "conn_xyz789",
    "message": "WebSocket connected successfully"
  },
  "timestamp": "2025-07-26T10:30:00Z"
}
```

#### 2. AI Response

```javascript
{
  "event": "response",
  "data": {
    "role": "assistant",
    "content": "I'd be happy to help you plan your wedding!...",
    "conversationId": "conv_abc123",
    "timestamp": "2025-07-26T10:30:15Z"
  },
  "timestamp": "2025-07-26T10:30:15Z"
}
```

#### 3. Bot Typing Indicator

```javascript
{
  "event": "bot-typing",
  "data": {
    "typing": true
  },
  "timestamp": "2025-07-26T10:30:00Z"
}
```

#### 4. Conversation Joined

```javascript
{
  "event": "conversation_joined",
  "data": {
    "conversationId": "conv_abc123",
    "messageCount": 5
  },
  "timestamp": "2025-07-26T10:30:00Z"
}
```

#### 5. Typing Status

```javascript
{
  "event": "typing_status",
  "data": {
    "conversationId": "conv_abc123",
    "typing": false
  },
  "timestamp": "2025-07-26T10:30:00Z"
}
```

#### 6. Error

```javascript
{
  "event": "error",
  "data": {
    "error": "Conversation not found"
  },
  "timestamp": "2025-07-26T10:30:00Z"
}
```

---

## Health Check

### Health Status

**GET** `/health`

Returns API health status.

**Response (200):**

```json
{
    "status": "ok",
    "timestamp": "2025-07-26T10:30:00Z",
    "service": "attend-agent"
}
```

---

## Error Responses

### Standard Error Format

```json
{
    "success": false,
    "message": "Error description",
    "errors": {
        "field_name": ["Specific validation error"]
    }
}
```

### Common HTTP Status Codes

-   `200` - Success
-   `201` - Created successfully
-   `400` - Bad Request (validation errors)
-   `404` - Resource not found
-   `422` - Validation failed
-   `500` - Internal server error

### Validation Error Example

```json
{
    "success": false,
    "message": "The given data was invalid.",
    "errors": {
        "name": ["The name field is required."],
        "email": ["The email must be a valid email address."]
    }
}
```

---

## Rate Limiting

-   API calls are currently unlimited
-   WebSocket connections: No limit
-   Consider implementing rate limiting for production

## Authentication

-   Currently no authentication required
-   All endpoints are public
-   Consider implementing API keys or JWT tokens for production

## CORS

-   CORS is enabled for all origins in development
-   Configure specific origins for production

## Notes for Frontend Implementation

1. Always check the `success` field in API responses
2. Handle both HTTP API and WebSocket for complete functionality
3. Implement proper error handling for network failures
4. Use pagination for vendor listings
5. Implement typing indicators for better UX
6. Cache vendor data when appropriate
7. Handle WebSocket reconnection scenarios
